swagger: "2.0"
info:
  description: "This is a sample server Lightstore server.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key `special-key` to test the authorization     filters."
  version: "1.0.0"
  title: "Smart bathroom"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "smart_bathroom_support@gmail.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "petstore.swagger.io"
basePath: "/v2"
tags:
- name: "light"
  description: "Everything about your Lights"
  
- name: "sink"
  description: "Everything about your Sink"
  
- name: "shower"
  description: "Everything about your Shower"
  
- name: "toilet"
  description: "Everything about your Toilet"
schemes:
- "https"
- "http"

paths:
  /light/send:
    post:
      tags:
      - "light"
      summary: "Send light's data to the Python webservice"
      description: ""
      operationId: "sendLightData"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/x-www-form-urlencoded"
      parameters:
      - in: "formData"
        name: "LightData"
        description: "Light's data to be sent to the Python webservice"
        type: "string"
        required: true
      responses:
        default:
          description: "Invalid input"

  /light/recieve:
    post:
      tags:
      - "light"
      summary: "Recieve confirmation of light's data from the Python webservice"
      description: ""
      operationId: "recieveLightData"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/x-www-form-urlencoded"
      parameters:
      - in: "formData"
        name: "LightData"
        description: "Light's data to be sent to the Python webservice"
        type: "string"
        required: true
      responses:
        default:
          description: "Invalid input"
  
  /sink/send:
    post:
      tags:
      - "sink"
      summary: "Send sink's data to the Python webservice"
      description: ""
      operationId: "sendSinkData"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/x-www-form-urlencoded"
      parameters:
      - in: "formData"
        name: "SinkData"
        description: "Sink's data to be sent to the Python webservice"
        type: "string"
        required: true
      responses:
        default:
          description: "Invalid input"

  /sink/recieve:
    post:
      tags:
      - "sink"
      summary: "Recieve confirmation of sink's data from the Python webservice"
      description: ""
      operationId: "recieveSinkData"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/x-www-form-urlencoded"
      parameters:
      - in: "formData"
        name: "SinkData"
        description: "Sink's data to be sent to the Python webservice"
        type: "string"
        required: true
      responses:
        default:
          description: "Invalid input"
          
  /shower/send:
    post:
      tags:
      - "shower"
      summary: "Send shower's data to the Python webservice"
      description: ""
      operationId: "sendShowerData"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/x-www-form-urlencoded"
      parameters:
      - in: "formData"
        name: "ShowerData"
        description: "Shower's data to be sent to the Python webservice"
        type: "string"
        required: true
      responses:
        default:
          description: "Invalid input"

  /shower/recieve:
    post:
      tags:
      - "shower"
      summary: "Recieve confirmation of shower's data from the Python webservice"
      description: ""
      operationId: "recieveShowerData"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/x-www-form-urlencoded"
      parameters:
      - in: "formData"
        name: "ShowerData"
        description: "Shower's data to be sent to the Python webservice"
        type: "string"
        required: true
      responses:
        default:
          description: "Invalid input"

  /toilet/send:
    post:
      tags:
      - "toilet"
      summary: "Send toilet's data to the Python webservice"
      description: ""
      operationId: "sendToiletData"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/x-www-form-urlencoded"
      parameters:
      - in: "formData"
        name: "ToiletData"
        description: "Toilet's data to be sent to the Python webservice"
        type: "string"
        required: true
      responses:
        default:
          description: "Invalid input"

  /toilet/recieve:
    post:
      tags:
      - "toilet"
      summary: "Recieve confirmation of toilet's data from the Python webservice"
      description: ""
      operationId: "recieveToiletData"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/x-www-form-urlencoded"
      parameters:
      - in: "formData"
        name: "ToiletData"
        description: "Toilet's data to be sent to the Python webservice"
        type: "string"
        required: true
      responses:
        default:
          description: "Invalid input"
        
    
definitions:
  Light:
    type: "object"
    required:
    - "data"
    properties:
      data:
        type: "string"
        example: "name=?;mode=?color1=?;color2=?'color3=?;brightness=?;"
      name:
        type: "string"
        example: "<name>"
      mode:
        type: "string"
        example: "RGB/HSB"
      color1:
        type: "integer"
        example: "0-255"
      color2:
        type: "integer"
        example: "0-255"
      color3:
        type: "integer"
        example: "0-255"
      brightness:
        type: "integer"
        example: "0-255"
        
  Sink:
    type: "object"
    required:
    - "data"
    properties:
      data:
        type: "string"
        example: "flow=?;temperature=?isSoap=?;Soap=?;"
      flow:
        type: "string"
        example: "Off/Low/Medium/High"
      temperature:
        type: "integer"
        example: "-10-49"
      isSoap:
        type: "string"
        example: "Yes/No"
      soap:
        type: "string"
        example: "<name>"
        
  Shower:
    type: "object"
    required:
    - "data"
    properties:
      data:
        type: "string"
        example: "temperature=?;pressure=?duration=?;gelQuantity=?;shampooQuantity=?;name=?;"
      temperature:
        type: "integer"
        example: "0-50"
      pressure:
        type: "integer"
        example: "1-100"
      duration:
        type: "integer"
        example: "1-100"
      gelQuantity:
        type: "integer"
        example: "10-500"
      shampooQuantity:
        type: "integer"
        example: "10-500"
      name:
        type: "string"
        example: "<name>"
  
  Toilet:
    type: "object"
    required:
    - "data"
    properties:
      data:
        type: "string"
        example: "name=?;isOccupied=?isNightLightOn=?;"
      name:
        type: "string"
        example: "<name>"
      isOccupied:
        type: "string"
        example: "Yes/No"
      isNightLightOn:
        type: "string"
        example: "Yes/No"
  
  ApiResponse:
    type: "string"
    properties:
      data:
        type: "string"
      type:
        type: "string"
      message:
        type: "string"
        
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
